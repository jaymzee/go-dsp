package wavio

import (
	"fmt"
)

func ExampleReadFloat32_f32() {
	x, _, err := ReadFloat32("test/float32.wav")
	if err != nil {
		panic(err)
	}

	for i, v := range x {
		fmt.Printf("[%d] = %f\n", i, v)
	}

	// Output:
	// [0] = 0.000000
	// [1] = 0.309017
	// [2] = 0.587785
	// [3] = 0.809017
	// [4] = 0.951057
	// [5] = 1.000000
	// [6] = 0.951057
	// [7] = 0.809017
	// [8] = 0.587785
	// [9] = 0.309017
	// [10] = 0.000000
	// [11] = -0.309017
	// [12] = -0.587785
	// [13] = -0.809017
	// [14] = -0.951057
	// [15] = -1.000000
	// [16] = -0.951057
	// [17] = -0.809017
	// [18] = -0.587785
	// [19] = -0.309017
	// [20] = -0.000000
}

func ExampleReadFloat64_f32() {
	x, _, err := ReadFloat64("test/float32.wav")
	if err != nil {
		panic(err)
	}

	for i, v := range x {
		fmt.Printf("[%d] = %f\n", i, v)
	}

	// Output:
	// [0] = 0.000000
	// [1] = 0.309017
	// [2] = 0.587785
	// [3] = 0.809017
	// [4] = 0.951057
	// [5] = 1.000000
	// [6] = 0.951057
	// [7] = 0.809017
	// [8] = 0.587785
	// [9] = 0.309017
	// [10] = 0.000000
	// [11] = -0.309017
	// [12] = -0.587785
	// [13] = -0.809017
	// [14] = -0.951057
	// [15] = -1.000000
	// [16] = -0.951057
	// [17] = -0.809017
	// [18] = -0.587785
	// [19] = -0.309017
	// [20] = -0.000000
}

func ExampleReadFloat32_f64() {
	x, _, err := ReadFloat32("test/float64.wav")
	if err != nil {
		panic(err)
	}

	for i, v := range x {
		fmt.Printf("[%d] = %f\n", i, v)
	}

	// Output:
	// [0] = 0.000000
	// [1] = 0.309017
	// [2] = 0.587785
	// [3] = 0.809017
	// [4] = 0.951057
	// [5] = 1.000000
	// [6] = 0.951057
	// [7] = 0.809017
	// [8] = 0.587785
	// [9] = 0.309017
	// [10] = 0.000000
	// [11] = -0.309017
	// [12] = -0.587785
	// [13] = -0.809017
	// [14] = -0.951057
	// [15] = -1.000000
	// [16] = -0.951057
	// [17] = -0.809017
	// [18] = -0.587785
	// [19] = -0.309017
	// [20] = -0.000000
}

func ExampleReadFloat64_f64() {
	x, _, err := ReadFloat64("test/float64.wav")
	if err != nil {
		panic(err)
	}

	for i, v := range x {
		fmt.Printf("[%d] = %f\n", i, v)
	}

	// Output:
	// [0] = 0.000000
	// [1] = 0.309017
	// [2] = 0.587785
	// [3] = 0.809017
	// [4] = 0.951057
	// [5] = 1.000000
	// [6] = 0.951057
	// [7] = 0.809017
	// [8] = 0.587785
	// [9] = 0.309017
	// [10] = 0.000000
	// [11] = -0.309017
	// [12] = -0.587785
	// [13] = -0.809017
	// [14] = -0.951057
	// [15] = -1.000000
	// [16] = -0.951057
	// [17] = -0.809017
	// [18] = -0.587785
	// [19] = -0.309017
	// [20] = -0.000000
}

func ExampleReadFloat32_pcm16() {
	x, _, err := ReadFloat32("test/pcm16.wav")
	if err != nil {
		panic(err)
	}

	for i, v := range x {
		fmt.Printf("[%d] = %f\n", i, v)
	}

	// Output:
	// [0] = 0.000000
	// [1] = 0.309030
	// [2] = 0.587786
	// [3] = 0.809015
	// [4] = 0.951048
	// [5] = 1.000000
	// [6] = 0.951048
	// [7] = 0.809015
	// [8] = 0.587786
	// [9] = 0.309030
	// [10] = 0.000000
	// [11] = -0.309030
	// [12] = -0.587786
	// [13] = -0.809015
	// [14] = -0.951048
	// [15] = -1.000000
	// [16] = -0.951048
	// [17] = -0.809015
	// [18] = -0.587786
	// [19] = -0.309030
	// [20] = 0.000000
}

func ExampleReadFloat64_pcm16() {
	x, _, err := ReadFloat64("test/pcm16.wav")
	if err != nil {
		panic(err)
	}

	for i, v := range x {
		fmt.Printf("[%d] = %f\n", i, v)
	}

	// Output:
	// [0] = 0.000000
	// [1] = 0.309030
	// [2] = 0.587786
	// [3] = 0.809015
	// [4] = 0.951048
	// [5] = 1.000000
	// [6] = 0.951048
	// [7] = 0.809015
	// [8] = 0.587786
	// [9] = 0.309030
	// [10] = 0.000000
	// [11] = -0.309030
	// [12] = -0.587786
	// [13] = -0.809015
	// [14] = -0.951048
	// [15] = -1.000000
	// [16] = -0.951048
	// [17] = -0.809015
	// [18] = -0.587786
	// [19] = -0.309030
	// [20] = 0.000000
}
